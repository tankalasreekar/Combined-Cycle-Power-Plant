# -*- coding: utf-8 -*-
"""ccpp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jRTkZ4igaBsl2ZmKNNmS8ua5p2dnYDw6
"""

import random
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler, Normalizer , MinMaxScaler

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

df = pd.read_excel('Folds5x2_pp.xlsx')

df.head()

df.shape

df.describe().T

df[df.isna().any(1)]

fig, ax = plt.subplots(2,2,figsize = (10,10))
cols = list(df.columns)[:-1]
for i,col in enumerate(cols):
  colors = ['r','g','b','y']
  sns.distplot(df[col],color = colors[i],ax = ax[i//2,i%2])

scAT = StandardScaler()
scV = StandardScaler()
scAP = StandardScaler()
scRH = StandardScaler()
scs = [scAT,scV,scAP,scRH]

for sc,col in zip(scs,df.columns):
    df[col] = sc.fit_transform(df[col].values.reshape(-1,1))

df.describe().T

fig, ax = plt.subplots(2,2,figsize = (10,10))
cols = list(df.columns)[:-1]
for i,col in enumerate(cols):
  colors = ['r','g','b','y']
  sns.distplot(df[col],color = colors[i],ax = ax[i//2,i%2])

plt.figure(figsize = (5,5))
sns.heatmap(df.corr(),annot = True,square = True)

df2 = pd.read_excel('Folds5x2_pp.xlsx')

norm = Normalizer()
df2 = pd.DataFrame(norm.fit_transform(df2.values),columns = df.columns)

df2.describe().T

fig, ax = plt.subplots(2,2,figsize = (10,10))
cols = list(df2.columns)[:-1]
for i,col in enumerate(cols):
  colors = ['r','g','b','y']
  sns.distplot(df2[col],color = colors[i],ax = ax[i//2,i%2])

plt.figure(figsize = (5,5))
sns.heatmap(df2.corr(),annot = True,square = True)

df3 = pd.read_excel('Folds5x2_pp.xlsx')

mmAT = MinMaxScaler()
mmV = MinMaxScaler()
mmAP = MinMaxScaler()
mmRH = MinMaxScaler()
min_maxs = [mmAT,mmV,mmAP,mmRH]

for mm,col in zip(min_maxs,df.columns):
    df3[col] = mm.fit_transform(df3[col].values.reshape(-1,1))

fig, ax = plt.subplots(2,2,figsize = (10,10))
cols = list(df3.columns)[:-1]
for i,col in enumerate(cols):
  colors = ['r','g','b','y']
  sns.distplot(df3[col],color = colors[i],ax = ax[i//2,i%2])

plt.figure(figsize = (5,5))
sns.heatmap(df3.corr(),annot = True,square = True)

data = pd.read_excel('Folds5x2_pp.xlsx')
dfs = [data,df,df2,df3]
fig, ax = plt.subplots(4,4,figsize = (12,12))
cols = list(df3.columns)[:-1]
titles = ['original','standard_scaled','normalised','min_max_scaled']
fig.suptitle('Comparing distributions of features from all dataframes',fontsize = 16)
for i,col in enumerate(cols):
  for j,frame in enumerate(dfs):
    colors = ['r','g','b','y']
    sns.distplot(frame[col],color = colors[i],ax = ax[i,j])
    ax[i,j].title.set_text(titles[j])
fig.tight_layout()
fig.subplots_adjust(top=0.92)

print('Original DataFrame')
X_train,X_test,y_train,y_test = train_test_split(data.values[:,:-1],data.PE,test_size = 0.2)
lr = LinearRegression()
lr.fit(X_train,y_train)
y_pred = lr.predict(X_test)
score = lr.score(X_test,y_test)
print('R^2 score for data : {}'.format(score))
mean_sq_err = mean_squared_error(y_test,y_pred)
print('Mean squared error : {}'.format(mean_sq_err))

print('Standard Scaled DataFrame')
X_train,X_test,y_train,y_test = train_test_split(df.values[:,:-1],df.PE,test_size = 0.2)
lr = LinearRegression()
lr.fit(X_train,y_train)
y_pred = lr.predict(X_test)
score = lr.score(X_test,y_test)
print('R^2 score for df : {}'.format(score))
mean_sq_err = mean_squared_error(y_test,y_pred)
print('Mean squared error : {}'.format(mean_sq_err))

print('Normalized DataFrame')
X_train,X_test,y_train,y_test = train_test_split(df2.values[:,:-1],df2.PE,test_size = 0.2)
lr = LinearRegression()
lr.fit(X_train,y_train)
y_pred = lr.predict(X_test)
score = lr.score(X_test,y_test)
print('R^2 score for df2 : {}'.format(score))
mean_sq_err = mean_squared_error(y_test,y_pred)
print('Mean squared error : {}'.format(mean_sq_err))

print('Min Max Scaled DataFrame')
X_train,X_test,y_train,y_test = train_test_split(df3.values[:,:-1],df3.PE,test_size = 0.2)
lr = LinearRegression()
lr.fit(X_train,y_train)
y_pred = lr.predict(X_test)
score = lr.score(X_test,y_test)
print('R^2 score for df3 : {}'.format(score))
mean_sq_err = mean_squared_error(y_test,y_pred)
print('Mean squared error : {}'.format(mean_sq_err))